#include <iostream> // Подключаем библиотеку для ввода-вывода
#include <vector>   // Подключаем библиотеку для работы с векторами
#include <cmath>    // Подключаем библиотеку для математических функций, таких как sqrt
#include <limits>   // Подключаем библиотеку для работы с предельными значениями типов данных

using namespace std; // Используем стандартное пространство имен, чтобы упростить синтаксис

int sum_of_squares(int n) { // Определяем функцию, принимающую целое число n

    // Шаг 1: Найдем все полные квадраты, которые меньше или равны n
    vector<int> squares; // Создаем вектор для хранения полных квадратов
    for (int i = 1; i * i <= n; ++i) { // Цикл от 1 до тех пор, пока квадрат i не превысит n
        squares.push_back(i * i); // Добавляем полный квадрат i в вектор squares
    }

    // Шаг 2: Инициализация массива dp
    vector<int> dp(n + 1, n + 1); // Создаем вектор dp размером n + 1 и инициализируем все его значения n + 1
    dp[0] = 0; // Устанавливаем dp[0] в 0, так как для суммы 0 не требуется ни одного квадрата

    // Шаг 3: Расчет минимального количества квадратов
    for (int square : squares) { // Перебираем каждый полный квадрат из вектора squares
        for (int i = square; i <= n; ++i) { // Для каждого значения i от текущего квадрата до n
            // Обновляем dp[i], чтобы минимизировать количество квадратов, необходимых для получения суммы i
            dp[i] = min(dp[i], dp[i - square] + 1); // Если добавляем квадрат, увеличиваем количество на 1
        }
    }

    // Возврат результата для dp[n]
    return dp[n]; // Возвращаем минимальное количество квадратов, необходимых для суммы n
}